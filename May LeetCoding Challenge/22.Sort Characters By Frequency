**********Problem**********
iven a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
***********Solution***********
class Solution {
    public String frequencySort(String s) {
        HashMap<Character,Integer> hm=new HashMap<>();
        for(int i=0;i<s.length();i++)
        {
            if(hm.containsKey(s.charAt(i)))
                hm.put(s.charAt(i),hm.get(s.charAt(i))+1);
            else
                hm.put(s.charAt(i),1);
        }
        
       PriorityQueue<Character> maxHeap=new PriorityQueue<>((a,b)->hm.get(b)-hm.get(a));
        maxHeap.addAll(hm.keySet());
        
        StringBuilder result=new StringBuilder();
        while(!maxHeap.isEmpty())
        {
            char curr=maxHeap.remove();
            for(int i=0;i<hm.get(curr);i++)
                result.append(curr);
        }
        return result.toString();
        
    }
}
