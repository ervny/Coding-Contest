**********Problem**********
In a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.

 

Example 1:

Input: N = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: N = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: N = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1
Example 4:

Input: N = 3, trust = [[1,2],[2,3]]
Output: -1
**********Solution**********
class Solution {
    public int findJudge(int N, int[][] trust) {
        
        int trustCount[]=new int[N];
        for(int i=0;i<trust.length;i++)
        {
            trustCount[trust[i][1]-1]++;
            trustCount[trust[i][0]-1]--;
        }
        
        for(int i=0;i<trustCount.length;i++)
        {
            if(trustCount[i]==N-1)
                return i+1;
        }
        return -1;
        
    }
}
**********Another SOlution**********
class Solution {
    public int findJudge(int N, int[][] trust) {
        
        int row=trust.length;
        int missingNumber=-1;
        HashSet<Integer> hs=new HashSet<>();
        for(int i=0;i<row;i++)
            hs.add(trust[i][0]);
        
        for(int i=1;i<=N;i++)
        {
            if(!hs.contains(i))
            {
                missingNumber=i;
                break;
            }
        }
        
       
        if(missingNumber<0)
            return -1;
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=1;i<=N;i++)
        {
            if(i!=missingNumber)
                hm.put(i,missingNumber);
        }
        
        for(Map.Entry<Integer,Integer> e:hm.entrySet())
        {
            System.out.print(e.getKey()+" ");
            System.out.println(e.getValue());
        }
        
        for(int i=0;i<row;i++)
        {
            int k1=trust[i][0];
            int v1=trust[i][1];
            if(hm.containsKey(k1) && (hm.get(k1)==v1))
                hm.remove(k1);
        }
        
        
        if(hm.size()==0)
            return missingNumber;
        else
            return -1;
        
    }
}
