**********Problem***********
Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.  The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)

 

Example 1:



Input: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
Reminder: The inputs and the desired output are lists of Interval objects, and not arrays or lists.
 ***********Solution*************
 class Solution {
    public int[][] intervalIntersection(int[][] A, int[][] B) {
        
        int i=0;
        int j=0;
        ArrayList<int[] > al=new ArrayList<>();
        while(i<A.length && j<B.length)
        {
            if(A[i][1]<B[j][0])
                i++;
            else if(B[j][1]<A[i][0])
                j++;
            else
            {
                int arr[]=new int[2];
                arr[0]=Math.max(A[i][0],B[j][0]);
                arr[1]=Math.min(A[i][1],B[j][1]);
                al.add(arr);
                if(A[i][1]<B[j][1])
                    i++;
                else if(B[j][1]<A[i][1])
                    j++;
                else
                {
                    i++;
                    j++;
                }
            }
            
        }
        int res[][]=new int[al.size()][2];
        for(i=0;i<al.size();i++)
        {
            res[i][0]=al.get(i)[0];
            res[i][1]=al.get(i)[1];
        }
                   return res;
    }
}
