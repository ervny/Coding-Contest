**********problem*********
In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
*********SOlution**********
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        
           Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()) {
            int size= queue.size();
            int c=0;
            for(int i=0;i<size;i++) {
                TreeNode node = queue.poll();
                if(x==node.val||y==node.val) {
                    c++;
                }
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }   
                if(node.left!=null && node.right!=null){
                    if((node.left.val==x && node.right.val==y) || (node.left.val==y && node.right.val==x)){
                        return false;
                    }
                }
            }
            if(c>1) {
                return true;
            }
        }
        return false;
        
    }
}
