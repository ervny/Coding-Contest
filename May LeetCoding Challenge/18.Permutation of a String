**********Problem*********

Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
*********Solution*********
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        
        if(s2.length() == 0 || s1.length() > s2.length())
            return false;
        
        if(s1.length() == 0)
            return true;
        
        Map<Character, Integer> S1= new HashMap<>(), S2= new HashMap<>();
        
        for(char c : s1.toCharArray())
            S1.put(c, S1.getOrDefault(c, 0) + 1);
        
        int left= 0, right= 0;
        
        while(right < s2.length()) {
            
            int len= right - left + 1;
            char c= s2.charAt(right);
            
            S2.put(c, S2.getOrDefault(c, 0) + 1);
            
            if(len < s1.length()) {
                right++;
                continue;
            }
            
            if(len == s1.length()) {
                
                char end= s2.charAt(left);
                
                if(S1.equals(S2))
                    return true;
                else {
                    S2.put(end, S2.get(end)-1);
                    if(S2.get(end) == 0)
                        S2.remove(end);
                }
                
                left++;
                right++;   
            }
            
        }
        
        return false;
    }
}
