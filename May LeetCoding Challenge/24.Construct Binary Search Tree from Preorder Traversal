***********Problem************
Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
***********Solution*************
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        if(preorder.length==0)
            return null;
       return  helper(preorder,0,preorder.length);    
    }
    public TreeNode helper(int preorder[],int rootIndex, int right)
    {
        if(rootIndex>=right)
            return null;
        int value=preorder[rootIndex];
        int i=rootIndex+1;
        TreeNode root=new TreeNode(value);
        while(i<preorder.length && value>preorder[i])
            i++;
        root.left=helper(preorder,rootIndex+1,i);
        root.right=helper(preorder,i,right);
        return root;      
    }
}
